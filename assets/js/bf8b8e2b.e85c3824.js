"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8952],{8689:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"CS61A/04 Class and Linked List","title":"04 Class and Linked List","description":"\u8fd9\u7bc7\u7b14\u8bb0\u5305\u542b\u7b2c\u4e03\u5468\u540e\u4e24\u6b21lecture\u5230\u7b2c\u4e5d\u7ae0\u7684\u5185\u5bb9\u3002\u7b2c\u5341\u7ae0\u8df3\u8fc7\u3002","source":"@site/docs/CS61A/04 Class and Linked List.md","sourceDirName":"CS61A","slug":"/CS61A/04 Class and Linked List","permalink":"/docs/CS61A/04 Class and Linked List","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/CS61A/04 Class and Linked List.md","tags":[],"version":"current","frontMatter":{"sidebair_position":4},"sidebar":"tutorialSidebar","previous":{"title":"03 Iterator and Generator","permalink":"/docs/CS61A/03 Iterator and Generator"},"next":{"title":"05 Scheme","permalink":"/docs/CS61A/05 Scheme"}}');var t=r(4848),i=r(8453);const c={sidebair_position:4},a=void 0,l={},o=[{value:"\u7c7b",id:"\u7c7b",level:2},{value:"\u7c7b\u6210\u5458",id:"\u7c7b\u6210\u5458",level:3},{value:"\u7ee7\u627f",id:"\u7ee7\u627f",level:3},{value:"<code>__str__()</code> \u4e0e <code>__repr__()</code>",id:"__str__-\u4e0e-__repr__",level:3},{value:"\u94fe\u8868",id:"\u94fe\u8868",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"\u8fd9\u7bc7\u7b14\u8bb0\u5305\u542b\u7b2c\u4e03\u5468\u540e\u4e24\u6b21lecture\u5230\u7b2c\u4e5d\u7ae0\u7684\u5185\u5bb9\u3002\u7b2c\u5341\u7ae0\u8df3\u8fc7\u3002"}),"\n",(0,t.jsx)(n.h2,{id:"\u7c7b",children:"\u7c7b"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class Account:\r\n    def __init__(self, account_holder):\r\n        self.balance = 0\r\n        self.holder = account_holder\r\n    \r\n    def deposit(self, amount):\r\n        self.balance = self.balance + amount\r\n        return self.balance\r\n\r\n    def withdraw(self, amount):\r\n        if amount > self.balance:\r\n            return 'Insufficient funds'\r\n        self.balance = self.balance - amount\r\n        return self.balance\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\u7c7b\u6210\u5458",children:"\u7c7b\u6210\u5458"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class Account:\r\n    interest = 0.02  # a class attribute\r\n\r\n    # ...\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\u7ee7\u627f",children:"\u7ee7\u627f"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class CheckingAccount(Account):\r\n    withdraw_fee = 1\r\n    interest = 0.01\r\n\r\n    def withdraw(self, amount):\r\n        return Account.withdraw(self, amount + self.withdraw_fee)\r\n        # or super().withdraw(self.amount + self.withdraw_fee)\n"})}),"\n",(0,t.jsx)(n.p,{children:"python\u5141\u8bb8\u7ee7\u627f\u591a\u4e2a\u7c7b\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class SavingAccount(Account):\r\n    deposit_fee = 2\r\n    \r\n    def deposit(self, amount):\r\n        return Account.deposit(self, amount - self.deposit_fee)\r\n\r\nclass AsSeenOnTVAccount(CheckingAccount, SavingAccount):\r\n    def __init__(self, account_holder):\r\n        self.holder = account_holder\r\n        self.balance = 1\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"__str__-\u4e0e-__repr__",children:[(0,t.jsx)(n.code,{children:"__str__()"})," \u4e0e ",(0,t.jsx)(n.code,{children:"__repr__()"})]}),"\n",(0,t.jsxs)(n.p,{children:["\u5728python\u4e2d\uff0c ",(0,t.jsx)(n.code,{children:"__str__()"})," \u751f\u6210\u5bf9\u4eba\u7c7b\u6613\u61c2\u7684\u5b57\u7b26\u4e32\uff0c ",(0,t.jsx)(n.code,{children:"__repr__()"})," \u4e3a\u7f16\u8bd1\u5668\u751f\u6210\u5b57\u7b26\u4e32\u3002"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:">>> from fractions import Fraction\r\n>>> half = Fraction(1, 2)\r\n>>> str(half)\r\n'1/2'\r\n>>> repr(half)\r\n'Fraction(1, 2)'\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\u94fe\u8868",children:"\u94fe\u8868"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class Link:\r\n    \"\"\"A linked list.\r\n\r\n    >>> s = Link(1)\r\n    >>> s.first\r\n    1\r\n    >>> s.rest is Link.empty\r\n    True\r\n    >>> s = Link(2, Link(3, Link(4)))\r\n    >>> s.first = 5\r\n    >>> s.rest.first = 6\r\n    >>> s.rest.rest = Link.empty\r\n    >>> s                                    # Displays the contents of repr(s)\r\n    Link(5, Link(6))\r\n    >>> s.rest = Link(7, Link(Link(8, Link(9))))\r\n    >>> s\r\n    Link(5, Link(7, Link(Link(8, Link(9)))))\r\n    >>> print(s)                             # Prints str(s)\r\n    <5 7 <8 9>>\r\n    \"\"\"\r\n    empty = ()\r\n\r\n    def __init__(self, first, rest=empty):\r\n        assert rest is Link.empty or isinstance(rest, Link)\r\n        self.first = first\r\n        self.rest = rest\r\n\r\n    def __repr__(self):\r\n        if self.rest is not Link.empty:\r\n            rest_repr = ', ' + repr(self.rest)\r\n        else:\r\n            rest_repr = ''\r\n        return 'Link(' + repr(self.first) + rest_repr + ')'\r\n\r\n    def __str__(self):\r\n        string = '<'\r\n        while self.rest is not Link.empty:\r\n            string += str(self.first) + ' '\r\n            self = self.rest\r\n        return string + str(self.first) + '>'\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>a});var s=r(6540);const t={},i=s.createContext(t);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);